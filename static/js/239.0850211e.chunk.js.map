{"version":3,"file":"static/js/239.0850211e.chunk.js","mappings":"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","sources":["components/auth/register/Register.jsx","shared/utils/validators.js","shared/hoc/auth.hoc.js"],"sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { AuthHoc } from \"../../../shared/hoc/auth.hoc\";\nimport { registerUser } from \"../../../app/auth/auth\";\n\nfunction RegisterComponent({\n  handleEmailChange,\n  handlePasswordChange,\n  handleAuthSubmit,\n  authState,\n}) {\n  const { user, errors } = authState;\n\n  return (\n    <div className=\"auth auth-register space\">\n      <h2>Welcome, create a free account!</h2>\n      <form className=\"space\">\n        <div className=\"form-group\">\n          <label htmlFor=\"email\" className=\"sr-only\">\n            Username\n          </label>\n          <input\n            type=\"email\"\n            className=\"form-control\"\n            placeholder=\"Your email address\"\n            id=\"email\"\n            name=\"email\"\n            autoComplete=\"false\"\n            value={user.email}\n            onChange={handleEmailChange}\n          />\n          {errors.email.required ? (\n            <small className=\"form-error\">{errors.email.required}</small>\n          ) : null}\n          {errors.email.email ? (\n            <small className=\"form-error\">{errors.email.email}</small>\n          ) : null}\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password\" className=\"sr-only\">\n            Password\n          </label>\n          <input\n            type=\"password\"\n            className=\"form-control\"\n            placeholder=\"Your password\"\n            id=\"password\"\n            name=\"password\"\n            autoComplete=\"false\"\n            value={user.password}\n            onChange={handlePasswordChange}\n          />\n          {errors.password.required ? (\n            <small className=\"form-error\">{errors.password.required}</small>\n          ) : null}\n        </div>\n        <div className=\"form-group form-actions\">\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary\"\n            disabled={\n              errors.email.required ||\n              errors.email.email ||\n              errors.password.required\n            }\n            onClick={handleAuthSubmit}\n          >\n            Register\n          </button>\n        </div>\n        <div>\n          <small>\n            Already have an account, <Link to=\"/login\">Login</Link>\n          </small>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nconst Register = AuthHoc(RegisterComponent, registerUser);\nexport default Register;\n","const validEmailRegex = /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/;\n\nexport const Validators = {\n  email: (value) => validEmailRegex.test(value),\n  required: (value) => value && typeof value === 'string' && value.trim().length > 0,\n}","/* eslint-disable react-hooks/rules-of-hooks */\nimport React, { useReducer } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Validators } from \"../utils/validators\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst initialState = {\n  user: {\n    email: \"\",\n    password: \"\",\n  },\n  errors: {\n    email: \"\",\n    password: \"\",\n  },\n};\n\nconst ActionTypes = {\n  EMAIL: \"EMAIL\",\n  PASSWORD: \"PASSWORD\",\n  ERRORS: \"ERRORS\",\n};\n\nconst emailAction = (value) => {\n  return {\n    type: ActionTypes.EMAIL,\n    payload: value,\n  };\n};\n\nconst passwordAction = (value) => {\n  return {\n    type: ActionTypes.PASSWORD,\n    payload: value\n  }\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ActionTypes.EMAIL:\n      return { ...state, user: { ...state.user, email: action.payload } };\n    case ActionTypes.PASSWORD:\n      return { ...state, user: { ...state.user, password: action.payload } };\n    case ActionTypes.ERRORS:\n      return { ...state, errors: { ...state.errors, ...action.payload } };\n    default:\n      return state;\n  }\n};\n\nexport const AuthHoc = (Component, authAction) => {\n  return () => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const reduxDispatch = useDispatch();\n    const navigate = useNavigate();\n    const { user, errors } = state;\n\n    const handleAuthSubmit = async (e) => {\n      e.preventDefault();\n      if (\n        errors.email.required ||\n        errors.email.email ||\n        errors.password.required\n      ) {\n        return;\n      }\n\n      reduxDispatch(authAction(user, navigate));\n    };\n\n    const handleEmailChange = (e) => {\n      const value = e.target.value;\n      const emailError = {};\n      if (!Validators.email(value)) {\n        emailError.email = \"Invlaid email\";\n      }\n      if (!Validators.required(value)) {\n        emailError.required = \"Email is required\";\n      }\n      dispatch(emailAction(value));\n      dispatch({ type: ActionTypes.ERRORS, payload: { email: emailError } });\n    };\n\n    const handlePasswordChange = (e) => {\n      const value = e.target.value;\n      const passError = {};\n      if (!Validators.required(value)) {\n        passError.required = \"Password is required\";\n      }\n      dispatch(passwordAction(value));\n      dispatch({ type: ActionTypes.ERRORS, payload: { password: passError } });\n    };\n\n    return <Component handleAuthSubmit={handleAuthSubmit} handleEmailChange={handleEmailChange} handlePasswordChange={handlePasswordChange} authState={state} />\n  }\n}"],"names":["AuthHoc","_ref","handleEmailChange","handlePasswordChange","handleAuthSubmit","authState","user","errors","_jsxs","className","children","_jsx","htmlFor","type","placeholder","id","name","autoComplete","value","email","onChange","required","password","disabled","onClick","Link","to","registerUser","validEmailRegex","Validators","test","trim","length","initialState","ActionTypes","reducer","state","arguments","undefined","action","payload","Component","authAction","dispatch","useReducer","reduxDispatch","useDispatch","navigate","useNavigate","async","e","preventDefault","target","emailError","emailAction","passError","passwordAction"],"sourceRoot":""}